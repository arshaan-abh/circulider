var Circulider;(()=>{"use strict";var e={150:(e,t,n)=>{n.d(t,{Z:()=>a});var r=n(537),i=n.n(r),s=n(645),o=n.n(s)()(i());o.push([e.id,'.circulider {\n    height: 100%;\n    aspect-ratio: 1;\n    box-sizing: border-box;\n    padding: 3rem;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n}\n\n.circulider img {\n    width: 100%;\n    height: 100%;\n}\n\n.circulider > * {\n    position: absolute;\n    width: 1rem;\n    aspect-ratio: 1;\n    border-radius: 50%;\n    overflow: hidden;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    --image-opacity: 1;\n}\n\n.circulider > * > * {\n    filter: blur(calc(var(--image-opacity) * 1rem));\n}\n\n\n.circulider > *::after {\n    content: "";\n    display: flex;\n    position: absolute;\n    width: 100%;\n    height: 100%;\n    background-color: rgba(255, 255, 255, calc(var(--image-opacity) * .25));\n}\n',"",{version:3,sources:["webpack://./src/main.css"],names:[],mappings:"AAAA;IACI,YAAY;IACZ,eAAe;IACf,sBAAsB;IACtB,aAAa;IACb,aAAa;IACb,mBAAmB;IACnB,uBAAuB;AAC3B;;AAEA;IACI,WAAW;IACX,YAAY;AAChB;;AAEA;IACI,kBAAkB;IAClB,WAAW;IACX,eAAe;IACf,kBAAkB;IAClB,gBAAgB;IAChB,aAAa;IACb,mBAAmB;IACnB,uBAAuB;IACvB,kBAAkB;AACtB;;AAEA;IACI,+CAA+C;AACnD;;;AAGA;IACI,WAAW;IACX,aAAa;IACb,kBAAkB;IAClB,WAAW;IACX,YAAY;IACZ,uEAAuE;AAC3E",sourcesContent:['.circulider {\r\n    height: 100%;\r\n    aspect-ratio: 1;\r\n    box-sizing: border-box;\r\n    padding: 3rem;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n}\r\n\r\n.circulider img {\r\n    width: 100%;\r\n    height: 100%;\r\n}\r\n\r\n.circulider > * {\r\n    position: absolute;\r\n    width: 1rem;\r\n    aspect-ratio: 1;\r\n    border-radius: 50%;\r\n    overflow: hidden;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    --image-opacity: 1;\r\n}\r\n\r\n.circulider > * > * {\r\n    filter: blur(calc(var(--image-opacity) * 1rem));\r\n}\r\n\r\n\r\n.circulider > *::after {\r\n    content: "";\r\n    display: flex;\r\n    position: absolute;\r\n    width: 100%;\r\n    height: 100%;\r\n    background-color: rgba(255, 255, 255, calc(var(--image-opacity) * .25));\r\n}\r\n'],sourceRoot:""}]);const a=o},645:e=>{e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n="",r=void 0!==t[5];return t[4]&&(n+="@supports (".concat(t[4],") {")),t[2]&&(n+="@media ".concat(t[2]," {")),r&&(n+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),n+=e(t),r&&(n+="}"),t[2]&&(n+="}"),t[4]&&(n+="}"),n})).join("")},t.i=function(e,n,r,i,s){"string"==typeof e&&(e=[[null,e,void 0]]);var o={};if(r)for(var a=0;a<this.length;a++){var c=this[a][0];null!=c&&(o[c]=!0)}for(var l=0;l<e.length;l++){var d=[].concat(e[l]);r&&o[d[0]]||(void 0!==s&&(void 0===d[5]||(d[1]="@layer".concat(d[5].length>0?" ".concat(d[5]):""," {").concat(d[1],"}")),d[5]=s),n&&(d[2]?(d[1]="@media ".concat(d[2]," {").concat(d[1],"}"),d[2]=n):d[2]=n),i&&(d[4]?(d[1]="@supports (".concat(d[4],") {").concat(d[1],"}"),d[4]=i):d[4]="".concat(i)),t.push(d))}},t}},537:e=>{e.exports=function(e){var t=e[1],n=e[3];if(!n)return t;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),i="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),s="/*# ".concat(i," */");return[t].concat([s]).join("\n")}return[t].join("\n")}},379:e=>{var t=[];function n(e){for(var n=-1,r=0;r<t.length;r++)if(t[r].identifier===e){n=r;break}return n}function r(e,r){for(var s={},o=[],a=0;a<e.length;a++){var c=e[a],l=r.base?c[0]+r.base:c[0],d=s[l]||0,u="".concat(l," ").concat(d);s[l]=d+1;var p=n(u),f={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==p)t[p].references++,t[p].updater(f);else{var h=i(f,r);r.byIndex=a,t.splice(a,0,{identifier:u,updater:h,references:1})}o.push(u)}return o}function i(e,t){var n=t.domAPI(t);return n.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;n.update(e=t)}else n.remove()}}e.exports=function(e,i){var s=r(e=e||[],i=i||{});return function(e){e=e||[];for(var o=0;o<s.length;o++){var a=n(s[o]);t[a].references--}for(var c=r(e,i),l=0;l<s.length;l++){var d=n(s[l]);0===t[d].references&&(t[d].updater(),t.splice(d,1))}s=c}}},569:e=>{var t={};e.exports=function(e,n){var r=function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(n)}},216:e=>{e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},565:(e,t,n)=>{e.exports=function(e){var t=n.nc;t&&e.setAttribute("nonce",t)}},795:e=>{e.exports=function(e){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var t=e.insertStyleElement(e);return{update:function(n){!function(e,t,n){var r="";n.supports&&(r+="@supports (".concat(n.supports,") {")),n.media&&(r+="@media ".concat(n.media," {"));var i=void 0!==n.layer;i&&(r+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),r+=n.css,i&&(r+="}"),n.media&&(r+="}"),n.supports&&(r+="}");var s=n.sourceMap;s&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(s))))," */")),t.styleTagTransform(r,e,t.options)}(t,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},589:e=>{e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}}},t={};function n(r){var i=t[r];if(void 0!==i)return i.exports;var s=t[r]={id:r,exports:{}};return e[r](s,s.exports,n),s.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.nc=void 0;var r={};(()=>{n.d(r,{default:()=>m});var e=n(379),t=n.n(e),i=n(795),s=n.n(i),o=n(569),a=n.n(o),c=n(565),l=n.n(c),d=n(216),u=n.n(d),p=n(589),f=n.n(p),h=n(150),A={};A.styleTagTransform=f(),A.setAttributes=l(),A.insert=a().bind(null,"head"),A.domAPI=s(),A.insertStyleElement=u(),t()(h.Z,A),h.Z&&h.Z.locals&&h.Z.locals;const m=function(){function e(e){var t=this;this.slides=[],this.centerX=0,this.centerY=0,this.step=0,e.classList.add("circulider"),this.width=function(e){var t=getComputedStyle(e),n=parseFloat(t.paddingLeft)+parseFloat(t.paddingRight),r=parseFloat(t.paddingTop)+parseFloat(t.paddingBottom),i=parseFloat(t.borderLeftWidth)+parseFloat(t.borderRightWidth),s=parseFloat(t.borderTopWidth)+parseFloat(t.borderBottomWidth);return{width:e.offsetWidth-n-i,height:e.offsetHeight-r-s}}(e).width,e.querySelectorAll(":scope > *").forEach((function(e,n){t.slides[n]={element:e,isMoving:!0,transform:""}})),window.requestAnimationFrame(this.placeChildren.bind(this))}return e.prototype.placeChildren=function(){var e=this;this.step%4==0&&this.slides.forEach((function(t,n){var r,i,s=e.width/2,o=(360/e.slides.length*n+e.step/10)%360,a=o*Math.PI/180,c=e.centerX+s*Math.cos(a),l=e.centerY+s*Math.sin(a);e.slides[n].transform="translate("+c+"px, "+l+"px) scale("+(1+(-l+s)/300)+")",r=(l/s).toString(),(i=t.element)||(i=document.documentElement),i.style.setProperty("--image-opacity",r),e.slides[n].isMoving&&(t.element.style.transform=e.slides[n].transform);var d=270-360/e.slides.length/2,u=360/e.slides.length/2+270;o>d&&o<u?e.select(n):e.deSelect(n)})),this.step+=1,window.requestAnimationFrame(this.placeChildren.bind(this))},e.prototype.select=function(e){this.slides[e].isMoving=!1,this.slides[e].element.style.transition="transform 1s",this.slides[e].element.style.transform="translate(0, 0) scale(25)",this.slides[e].element.offsetHeight},e.prototype.deSelect=function(e){this.slides[e].isMoving||this.resume(e)},e.prototype.resume=function(e){this.slides[e].element.style.transition="transform .1s",this.slides[e].element.style.transform=this.slides[e].transform,this.slides[e].element.offsetHeight,this.slides[e].element.addEventListener("transitionend",this.removeTransition.bind(this,e))},e.prototype.removeTransition=function(e){this.slides[e].element.style.transition="",this.slides[e].isMoving=!0,this.slides[e].element.offsetHeight,this.slides[e].element.removeEventListener("transitionend",this.removeTransition.bind(this,e))},e}()})(),Circulider=r.default})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,